import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.*;
import java.awt.event.*;
import java.util.Random;

class PasswordGeneratorGUI extends JFrame {

    // Characters to use
    static final String UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    static final String LOWER = "abcdefghijklmnopqrstuvwxyz";
    static final String NUMBERS = "0123456789";
    static final String SYMBOLS = "!@#$%^&*()_-+=<>?/";

    JTextField lengthField;
    JTextArea passwordArea;
    JButton generateButton;
    JButton copyButton;

    public PasswordGeneratorGUI() {
        setTitle("ðŸ”¥ Password Generator Brooo ðŸ”¥");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new FlowLayout());

        JLabel lengthLabel = new JLabel("Enter Password Length:");
        lengthField = new JTextField(10);

        generateButton = new JButton("Generate Password");
        copyButton = new JButton("Copy to Clipboard");

        passwordArea = new JTextArea(4, 30);
        passwordArea.setLineWrap(true);
        passwordArea.setWrapStyleWord(true);
        passwordArea.setEditable(false);

        add(lengthLabel);
        add(lengthField);
        add(generateButton);
        add(copyButton);
        add(new JScrollPane(passwordArea));

        generateButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                generatePassword();
            }
        });

        copyButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                copyPassword();
            }
        });

        setVisible(true);
    }

    // Method to generate password
    private void generatePassword() {
        try {
            int length = Integer.parseInt(lengthField.getText());
            String allChars = UPPER + LOWER + NUMBERS + SYMBOLS;
            Random random = new Random();
            StringBuilder password = new StringBuilder();

            for (int i = 0; i < length; i++) {
                int index = random.nextInt(allChars.length());
                password.append(allChars.charAt(index));
            }

            passwordArea.setText(password.toString());
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Bro, please enter a valid number!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Method to copy password
    private void copyPassword() {
        String password = passwordArea.getText();
        if (!password.isEmpty()) {
            StringSelection selection = new StringSelection(password);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(selection, null);
            JOptionPane.showMessageDialog(this, "âœ… Password copied, brooo!");
        } else {
            JOptionPane.showMessageDialog(this, "Bro, generate a password first!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }

    public static void main(String[] args) {
        new PasswordGeneratorGUI();
    }
}
